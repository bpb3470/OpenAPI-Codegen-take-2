openapi: 3.0.1
info:
  title: "OpenWeatherMap API"
  description: "Weather return API  "
  version: "1.0"
servers:
- url: "http://api.openweathermap.org"
  description: " "

paths:
  '/data/2.5/weather':
    post:
      tags:
      - Current Weather Data
      description: Request weather data
      
      #I think this line should be something like this:
     #'/udb/{networkId}/ip/i.gif':
      #but I don't know how to write that so im going to just put Paramaters.
      parameters:
        - name: q
          in: query
          description: "City name, state code and country divided by a comma.  Paramaters can be
                      passed in languages other than english.  The API response should be 
                      returned in the same language as the language of requested location name 
                      if the location is in the predefined list of more than 200,000 locations."
          schema:
            type: string
        - name: appid
          in: query
          description: "The User's unique API key"
          schema:
            type: string
        - name: mode
          in: query
          description:  "Response format. Possible values are xml and html. If you don't use the mode parameter format is JSON by default"
          schema:
            type: string
            enum: [json, html, xml]
            default: "json"
        - name: units
          in: query
          description: "The returned values unit of measurement.  "
          schema:
            type: string
            enum: [standard, metric, imperial]
            default: "standard"
        - name: lang
          in: query
          description: "parameter determines output language"
          schema:
            type: string
            enum: [af, al, ar, az, bg, ca, cz, da, de, el, en, eu,
                  fa, fi, fr, gl, he, hi, hr, hu, id, it, ja, kr, la,
                  lt, mk, no, nl, nl, p, pt, pt_br, ro, ru, sv, se, sk,
                  sl, sp, es, sr, th, tr, ua, uk, vi, zh_cn, zh_tw, zu]
            default: "en"
        - name: lat
          in: query
          description: "geographical latitude coordinate of the location 
                      you want the weather of.  Must include 'lat'"
          schema:
            type: string
        - name: lon
          in: query
          description: "geographical longitude coordinate of the location 
                      you want the weather of.  Must include 'lon'"
          schema:
            type: string
        - name: zip
          in: query
          description: "zip code of the location you want the weather of.
                      If no location is specific the default is the US"
          schema:
            type: string
        - name: bbox
          in: query
          description: "Bounding box containing areas of interest in their weather
                      must specify all four coordinates in the order of lon-left,
                      lat-bottom,lon-right,lat-top,zoom]"
          schema:
            type: string
            enum: [lon-left,lat-bottom,lon-right,lat-top,zoom]
        - name: cnt
          in: query
          description: "number of cities in the location reuqest around specified
                      longitude and latitude coordinates"
          schema:
            type: string
            enum: [json, xml, html]
            default: "json"
          
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  coord:
                    $ref: '#/components/schemas/coord'
                  weather:
                    $ref: '#/components/schemas/weather'
                  base:
                    $ref: '#/components/schemas/base'
                  main:
                    $ref: '#/components/schemas/main'
                  visibility:
                    $ref: '#/components/schemas/visibility'
                  wind:
                    $ref: '#/components/schemas/wind'
                  clouds:
                    $ref: '#/components/schemas/clouds'
                  dt:
                    $ref: '#/components/schemas/dt'
                  sys:
                    $ref: '#/components/schemas/sys'
                  timezone:
                    $ref: '#/components/schemas/timezone'
                  id:
                    $ref: '#/components/schemas/id'
                  name:
                    $ref: '#/components/schemas/name'
                  cod:
                    $ref: '#/components/schemas/cod'
                
              
components:
  schemas:
    coord:
      type: object
      properties:
        lat:
          type: number
          description: "City geo location, latitude"
        Lon:
          type: number
          description: "City geo location, longitude"  
    weather:
      type: object
      properties:
        id:
          type: integer
          description: weather condition ID
        main:
          type: string
          description: "Group of weather parameters (Rain, Snow, Extreme etc.)"
        description:
          type: string
          description: "Weather condition within the group. You can get the output in your language."
        icon:
          type: string
          description: "Weather icon id"
    base:
      type: string
      description: Internal parameter
    main:
      type: object
      properties:
        temp:
          type: number
          description: "Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit."
        feels_like:
          type: number
          description: "parameter accounts for the human perception of weather."
        pressure:
          type: integer
          description: "Atmospheric pressure on the sea level"
        humidity:
          type: integer
          description: "Humidity, %"
        temp_min:
          type: number
          description: "Minimum temperature at the moment.  Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit."
        temp_max:
          type: number
          description: "Maxumum temperature at the moment.  Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit."
#        sea_level:
#          type: integer
#          description: "Atmospheric pressure on the sea level, hPa"
#        grnd_level:
#          type: integer
#          description: "Atmospheric pressure on the ground level, hPa"
    visibility:
      type: integer
      description: "distance visible in the specified location"
    wind:
      type: object
      properties: 
        speed:
          type: number
          description: "wind speed in decimal form"
        deg:
          type: integer
          description: "angle of the win in location"
    clouds:
      type: integer
      description: cloud coverage
    dt:
      type: integer
      description: "time taken to calculate"
    sys:
      type: object
      properties:
        type:
          type: integer
          description: internal parameter
        id:
          type: integer
          description: internal parameter
        message:
          type: number
          description: internal parameter
        country:
          type: string
          description: Country code (GB, JP etc.)
        sunrise:
          type: integer
          description:  Sunrise time, unix, UTC
        sunset:
          type: integer
          description: Sunset time, unix, UTC
    timezone:
      type: integer
      description: Shift in seconds from UTC 
    id:
      description: City ID
    name:  #changing from name to cityname due to error
      type: string
      description: "city name"
    cod:
      type: integer
      example: 200
      description: internal parameter
